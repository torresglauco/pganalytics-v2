version: '3.8'

services:
  postgres_app:
    image: postgres:15
    container_name: pganalytics_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - pganalytics_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pganalytics_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pganalytics_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pganalytics_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres_app:5432/postgres
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    depends_on:
      postgres_app:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pganalytics_network
    volumes:
      - ./backend:/app
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pganalytics_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - pganalytics_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  pganalytics_network:
    driver: bridge
