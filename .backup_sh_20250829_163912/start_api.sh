#!/bin/bash
echo "üöÄ INICIANDO API DO PGANALYTICS"

echo "üîç 1. Verificando se API est√° definida no docker-compose..."
if grep -q "api:" docker-compose.yml 2>/dev/null; then
    echo "  ‚úÖ Servi√ßo API encontrado no docker-compose"
    echo "  üöÄ Tentando iniciar via Docker..."
    
    if docker-compose up -d api; then
        echo "  ‚úÖ API iniciada via Docker"
        
        echo "  ‚è≥ Aguardando inicializa√ß√£o (10 segundos)..."
        sleep 10
        
        # Verificar se subiu
        if curl -s http://localhost:8080/health >/dev/null 2>&1; then
            echo "  ‚úÖ API respondendo na porta 8080"
        else
            echo "  ‚ö†Ô∏è API pode estar iniciando ainda, verifique logs:"
            echo "     docker-compose logs api"
        fi
    else
        echo "  ‚ùå Falha ao iniciar API via Docker"
        echo "  üìã Tentando m√©todo manual..."
    fi
else
    echo "  ‚ö™ Servi√ßo API n√£o encontrado no docker-compose"
    echo "  üìã Tentando iniciar manualmente..."
fi

echo ""
echo "üîß 2. M√©todo alternativo: Executar manualmente..."
if [ -f "cmd/server/main.go" ]; then
    echo "  üìÑ main.go encontrado"
    echo "  üîÑ Verificando depend√™ncias..."
    
    if go mod tidy; then
        echo "    ‚úÖ Depend√™ncias OK"
        
        echo "  üöÄ Iniciando API manualmente..."
        echo "    üí° Pressione Ctrl+C para parar"
        echo "    üåê API estar√° dispon√≠vel em: http://localhost:8080"
        echo ""
        
        # Iniciar em background para poder continuar
        go run cmd/server/main.go &
        API_PID=$!
        
        echo "  üìä API iniciada com PID: $API_PID"
        echo "  ‚è≥ Aguardando inicializa√ß√£o (5 segundos)..."
        sleep 5
        
        # Testar se subiu
        if curl -s http://localhost:8080/health >/dev/null 2>&1; then
            echo "  ‚úÖ API respondendo!"
            echo "  üåê Health: http://localhost:8080/health"
            echo "  üìö Swagger: http://localhost:8080/swagger/index.html"
            echo ""
            echo "  üìã Para parar a API: kill $API_PID"
        else
            echo "  ‚ö†Ô∏è API pode estar inicializando, teste manualmente:"
            echo "     curl http://localhost:8080/health"
        fi
    else
        echo "    ‚ùå Erro nas depend√™ncias Go"
    fi
else
    echo "  ‚ùå cmd/server/main.go n√£o encontrado"
fi

echo ""
echo "üìä 3. Status final dos servi√ßos..."
echo "  üê≥ Containers Docker:"
docker-compose ps | grep -E "postgres|api" || echo "    Apenas postgres rodando"

echo ""
echo "  üåê Teste de conectividade:"
echo "    PostgreSQL: $(docker-compose exec postgres pg_isready -U pganalytics >/dev/null 2>&1 && echo '‚úÖ OK' || echo '‚ùå Falha')"
echo "    API Health: $(curl -s http://localhost:8080/health >/dev/null 2>&1 && echo '‚úÖ OK' || echo '‚ùå Falha')"

echo ""
echo "‚úÖ Script de inicializa√ß√£o conclu√≠do!"
