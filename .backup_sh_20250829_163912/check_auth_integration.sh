#!/bin/bash
echo "üîê VERIFICANDO INTEGRA√á√ÉO DA AUTENTICA√á√ÉO"

echo "üìä 1. Verificando arquivos de autentica√ß√£o..."
echo "  üìÑ Models:"
[ -f "internal/models/user_models.go" ] && echo "    ‚úÖ user_models.go" || echo "    ‚ùå user_models.go"

echo "  üîß Services:"
[ -f "internal/services/token_service.go" ] && echo "    ‚úÖ token_service.go" || echo "    ‚ùå token_service.go"
[ -f "internal/services/auth_service.go" ] && echo "    ‚úÖ auth_service.go" || echo "    ‚ùå auth_service.go"

echo "  üåê Handlers:"
[ -f "internal/handlers/auth_handlers.go" ] && echo "    ‚úÖ auth_handlers.go" || echo "    ‚ùå auth_handlers.go"

echo "  üõ°Ô∏è Middleware:"
[ -f "internal/middleware/auth_middleware.go" ] && echo "    ‚úÖ auth_middleware.go" || echo "    ‚ùå auth_middleware.go"

echo ""
echo "üîç 2. Verificando se main.go usa autentica√ß√£o..."
if grep -q "internal/services\|internal/handlers\|auth" cmd/server/main.go; then
    echo "  ‚úÖ main.go importa m√≥dulos de auth"
    
    echo "  üîç Imports encontrados:"
    grep -n "internal/" cmd/server/main.go | head -5 | sed 's/^/    /'
else
    echo "  ‚ö†Ô∏è main.go pode n√£o estar usando m√≥dulos de auth completos"
fi

echo ""
echo "üåê 3. Verificando rotas de autentica√ß√£o dispon√≠veis..."

# Testar rotas que deveriam existir
auth_routes=("/auth/login" "/auth/register" "/auth/refresh" "/auth/logout" "/auth/profile")

for route in "${auth_routes[@]}"; do
    status=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8080$route" 2>/dev/null)
    if [ "$status" = "404" ]; then
        echo "  ‚ùå $route (HTTP $status) - n√£o implementada"
    elif [ "$status" = "405" ]; then
        echo "  ‚úÖ $route (HTTP $status) - existe mas m√©todo incorreto"
    elif [ "$status" = "400" ] || [ "$status" = "401" ]; then
        echo "  ‚úÖ $route (HTTP $status) - existe e funcional"
    else
        echo "  ‚ö™ $route (HTTP $status)"
    fi
done

echo ""
echo "üìä 4. Testando endpoints espec√≠ficos..."

# Testar registro
echo "  üìù Testando registro de novo usu√°rio..."
REGISTER_TEST=$(curl -s -X POST "http://localhost:8080/auth/register" \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"test123","name":"Test User"}' 2>/dev/null)

if echo "$REGISTER_TEST" | grep -q "error\|Error\|404\|405"; then
    echo "    ‚ö†Ô∏è Endpoint /auth/register pode n√£o estar implementado"
    echo "    üìä Resposta: $REGISTER_TEST"
else
    echo "    ‚úÖ Endpoint /auth/register responde"
fi

# Testar profile (deve dar 401 sem token)
echo "  üë§ Testando perfil (sem autentica√ß√£o)..."
PROFILE_TEST=$(curl -s "http://localhost:8080/auth/profile" 2>/dev/null)
if echo "$PROFILE_TEST" | grep -q "401\|Unauthorized\|token"; then
    echo "    ‚úÖ Endpoint /auth/profile protegido corretamente"
else
    echo "    ‚ö†Ô∏è Endpoint /auth/profile: $PROFILE_TEST"
fi

echo ""
echo "üîß 5. Recomenda√ß√µes..."

echo "  üìã Se alguns endpoints n√£o existem, voc√™ pode:"
echo "    1. Verificar se main.go importa todos os handlers"
echo "    2. Adicionar rotas de auth manualmente"
echo "    3. Usar o exemplo em MAIN_GO_INTEGRATION.md"
echo "    4. Executar: bash update_main_go.sh"

echo ""
echo "‚úÖ Verifica√ß√£o de integra√ß√£o conclu√≠da!"
