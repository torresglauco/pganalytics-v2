# ðŸš€ PG Analytics v2 - Setup ProduÃ§Ã£o Enterprise
# ==============================================

services:
  postgres:
    image: postgres:15-alpine
    container_name: pganalytics-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-pganalytics}
      POSTGRES_USER: ${DB_USER:-pganalytics}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pganalytics123}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./../../migrations:/docker-entrypoint-initdb.d/
    networks:
      - pganalytics
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pganalytics} -d ${DB_NAME:-pganalytics}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  api:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: production
    container_name: pganalytics-api-prod
    environment:
      - APP_ENV=production
      - DB_HOST=postgres
      - DB_USER=${DB_USER:-pganalytics}
      - DB_PASSWORD=${DB_PASSWORD:-pganalytics123}
      - DB_NAME=${DB_NAME:-pganalytics}
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
    ports:
      - "${APP_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pganalytics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  c-collector:
    build:
      context: ../../
      dockerfile: docker/Dockerfile.c-collector
    container_name: pganalytics-c-collector-prod
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-pganalytics}:${DB_PASSWORD:-pganalytics123}@postgres:5432/${DB_NAME:-pganalytics}
      - METRICS_PORT=8080
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pganalytics
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  prometheus:
    image: prom/prometheus:latest
    container_name: pganalytics-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./../../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - pganalytics
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: pganalytics-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - pganalytics
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

volumes:
  postgres_data:
    name: pganalytics_postgres_data_prod
  prometheus_data:
    name: pganalytics_prometheus_data_prod
  grafana_data:
    name: pganalytics_grafana_data_prod

networks:
  pganalytics:
    name: pganalytics_network_prod
    driver: bridge
