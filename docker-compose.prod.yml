version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: pganalytics-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-pganalytics}
      POSTGRES_USER: ${DB_USER:-pganalytics}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pganalytics123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - pganalytics-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pganalytics} -d ${DB_NAME:-pganalytics}"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: pganalytics-backend-prod
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgres://pganalytics:pganalytics123@postgres:5432/pganalytics?sslmode=disable}
      PORT: ${PORT:-8080}
      GIN_MODE: release
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      APP_ENV: production
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pganalytics-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_prod_data:
    driver: local

networks:
  pganalytics-prod-network:
    driver: bridge
