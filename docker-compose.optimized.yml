version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: pganalytics-postgres-optimized
    environment:
      POSTGRES_DB: pganalytics
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      # Performance optimizations
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.7
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
    networks:
      - pganalytics_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./monitoring/sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d pganalytics"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  c-collector-optimized:
    build:
      context: monitoring/c-collector
      dockerfile: Dockerfile.optimized
    container_name: pganalytics-collector-optimized
    environment:
      DATABASE_URL: "host=postgres port=5432 dbname=pganalytics user=admin password=admin123"
      TENANT_NAME: "default"
      COLLECTION_INTERVAL: "10"
    networks:
      - pganalytics_network
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'

  go-backend-optimized:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: pganalytics-backend-optimized
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: pganalytics
      DB_USER: admin
      DB_PASSWORD: admin123
      JWT_SECRET: your-jwt-secret-here
      PORT: 8081
      ENVIRONMENT: production
    networks:
      - pganalytics_network
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.15'

networks:
  pganalytics_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
