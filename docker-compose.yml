
services:
  postgres_app:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-pganalytics}
      POSTGRES_USER: ${DB_USER:-pguser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pganalytics_network
    # Porta removida para segurança - acesso apenas interno
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pguser} -d ${DB_NAME:-pganalytics}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-secureRedisPass123!}
      --appendonly yes
      --save 60 1000
      --loglevel warning
    volumes:
      - redis_data:/data
    networks:
      - pganalytics_network
    # Porta removida para segurança - acesso apenas interno
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-secureRedisPass123!}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      # Banco de dados
      DB_HOST: postgres_app
      DB_PORT: 5432
      DB_USER: ${DB_USER:-pguser}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-pganalytics}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Segurança
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
      # Admin
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@pganalytics.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      
      # Frontend
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
    depends_on:
      postgres_app:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pganalytics_network
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    depends_on:
      - backend
    networks:
      - pganalytics_network
    ports:
      - "${FRONTEND_PORT:-80}:80"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  pganalytics_network:
    driver: bridge
