package handlers

import (
	"net/http"
	"time"
	"pganalytics-backend/internal/config"
	"pganalytics-backend/internal/middleware"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

// LoginRequest represents the login request payload
type LoginRequest struct {
	Username string `json:"username" binding:"required" example:"admin"`
	Password string `json:"password" binding:"required" example:"admin"`
}

// LoginResponse represents the login response
type LoginResponse struct {
	Token string `json:"token" example:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."`
	User  string `json:"user" example:"admin"`
}

// HealthResponse represents the health check response
type HealthResponse struct {
	Status    string `json:"status" example:"ok"`
	Service   string `json:"service" example:"pganalytics-backend"`
	Timestamp string `json:"timestamp" example:"2024-01-01T00:00:00Z"`
}

// MetricsRequest represents metrics submission payload
type MetricsRequest struct {
	Database string                 `json:"database" example:"production_db"`
	Metrics  map[string]interface{} `json:"metrics"`
	Tags     map[string]string      `json:"tags,omitempty"`
}

// ErrorResponse represents an error response
type ErrorResponse struct {
	Error   string `json:"error" example:"Invalid request"`
	Details string `json:"details,omitempty"`
}

func SetupRoutes(router *gin.Engine, cfg *config.Config, db *pgxpool.Pool) {
	// Health check
	router.GET("/health", healthCheck)

	// Auth routes
	auth := router.Group("/auth")
	{
		auth.POST("/login", loginHandler(cfg.JWTSecret))
	}

	// Protected API routes
	api := router.Group("/api")
	api.Use(middleware.AuthMiddleware(cfg.JWTSecret))
	{
		api.POST("/metrics", metricsHandler(db))
		api.GET("/data", dataHandler(db))
	}
}

// HealthCheck godoc
// @Summary Check API health
// @Description Get the health status of the API
// @Tags health
// @Accept json
// @Produce json
// @Success 200 {object} HealthResponse
// @Router /health [get]
func healthCheck(c *gin.Context) {
	c.JSON(http.StatusOK, HealthResponse{
		Status:    "ok",
		Service:   "pganalytics-backend",
		Timestamp: time.Now().Format(time.RFC3339),
	})
}

// Login godoc
// @Summary User login
// @Description Authenticate user and get JWT token
// @Tags auth
// @Accept json
// @Produce json
// @Param login body LoginRequest true "Login credentials"
// @Success 200 {object} LoginResponse
// @Failure 400 {object} ErrorResponse
// @Failure 401 {object} ErrorResponse
// @Router /auth/login [post]
func loginHandler(jwtSecret string) gin.HandlerFunc {
	return func(c *gin.Context) {
		var loginReq LoginRequest

		if err := c.ShouldBindJSON(&loginReq); err != nil {
			c.JSON(http.StatusBadRequest, ErrorResponse{
				Error:   "Invalid request",
				Details: err.Error(),
			})
			return
		}

		// Simple authentication (replace with your logic)
		if loginReq.Username == "admin" && loginReq.Password == "admin" {
			// Create JWT token
			token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
				"username": loginReq.Username,
				"exp":      time.Now().Add(time.Hour * 24).Unix(),
			})

			tokenString, err := token.SignedString([]byte(jwtSecret))
			if err != nil {
				c.JSON(http.StatusInternalServerError, ErrorResponse{
					Error: "Failed to generate token",
				})
				return
			}

			c.JSON(http.StatusOK, LoginResponse{
				Token: tokenString,
				User:  loginReq.Username,
			})
		} else {
			c.JSON(http.StatusUnauthorized, ErrorResponse{
				Error: "Invalid credentials",
			})
		}
	}
}

// SubmitMetrics godoc
// @Summary Submit analytics metrics
// @Description Submit performance metrics to the analytics system
// @Tags metrics
// @Accept json
// @Produce json
// @Security BearerAuth
// @Param metrics body MetricsRequest true "Metrics data"
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} ErrorResponse
// @Failure 401 {object} ErrorResponse
// @Router /api/metrics [post]
func metricsHandler(db *pgxpool.Pool) gin.HandlerFunc {
	return func(c *gin.Context) {
		var metrics MetricsRequest
		if err := c.ShouldBindJSON(&metrics); err != nil {
			c.JSON(http.StatusBadRequest, ErrorResponse{
				Error:   "Invalid metrics data",
				Details: err.Error(),
			})
			return
		}

		// TODO: Process and store metrics in database
		c.JSON(http.StatusOK, gin.H{
			"status":    "metrics received",
			"timestamp": time.Now().Format(time.RFC3339),
			"data":      metrics,
		})
	}
}

// GetData godoc
// @Summary Get analytics data
// @Description Retrieve analytics data and performance statistics
// @Tags analytics
// @Accept json
// @Produce json
// @Security BearerAuth
// @Success 200 {object} map[string]interface{}
// @Failure 401 {object} ErrorResponse
// @Router /api/data [get]
func dataHandler(db *pgxpool.Pool) gin.HandlerFunc {
	return func(c *gin.Context) {
		// TODO: Fetch analytics data from database
		c.JSON(http.StatusOK, gin.H{
			"data": gin.H{
				"message": "Analytics data will be available here",
				"query_performance": []gin.H{
					{"query": "SELECT * FROM users", "avg_time": "2.3ms"},
					{"query": "SELECT * FROM orders", "avg_time": "5.1ms"},
				},
				"connections": gin.H{
					"active": 10,
					"idle":   5,
					"total":  15,
				},
			},
			"timestamp": time.Now().Format(time.RFC3339),
		})
	}
}
