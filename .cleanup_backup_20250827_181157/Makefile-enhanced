# Makefile for PGAnalytics Backend

.PHONY: help dev build clean test docs deps security lint fmt vet

# Variables
GO_VERSION := 1.23
APP_NAME := pganalytics-backend
DOCKER_IMAGE := $(APP_NAME):latest

help: ## Show this help message
	@echo 'Usage: make [target]'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

dev: ## Start development environment
	@echo "🚀 Starting PGAnalytics development environment..."
	docker-compose up --build

build: ## Build the application
	@echo "🔨 Building $(APP_NAME)..."
	docker-compose build

clean: ## Clean up containers and images
	@echo "🧹 Cleaning up..."
	docker-compose down -v
	docker system prune -f

test: ## Run tests
	@echo "🧪 Running tests..."
	go test -v ./...
	go test -race -coverprofile=coverage.out ./...

test-coverage: ## Run tests with coverage report
	@echo "📊 Running tests with coverage..."
	go test -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out -o coverage.html
	@echo "Coverage report: coverage.html"

docs: ## Generate API documentation
	@echo "📚 Generating API documentation..."
	swag init -g cmd/server/main.go
	@echo "Swagger docs will be available at /swagger/index.html"

deps: ## Download dependencies
	@echo "📦 Downloading dependencies..."
	go mod download
	go mod tidy

security: ## Run security scan
	@echo "🔒 Running security scan..."
	go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
	gosec ./...

lint: ## Run linter
	@echo "🔍 Running linter..."
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	golangci-lint run

fmt: ## Format code
	@echo "✨ Formatting code..."
	go fmt ./...

vet: ## Run go vet
	@echo "🔎 Running go vet..."
	go vet ./...

logs: ## Show application logs
	docker-compose logs -f api

restart: ## Restart the API service
	@echo "🔄 Restarting API service..."
	docker-compose restart api

install-tools: ## Install development tools
	@echo "🛠️  Installing development tools..."
	go install github.com/swaggo/swag/cmd/swag@latest
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

pre-commit: fmt vet lint security test ## Run all pre-commit checks

ci: deps docs build test security ## Run CI pipeline locally

deploy-prod: ## Deploy to production
	@echo "🚀 Deploying to production..."
	docker-compose -f docker-compose.prod.yml up -d

status: ## Show service status
	@echo "📊 Service status:"
	docker-compose ps
	@echo ""
	@echo "🌐 Health check:"
	curl -s http://localhost:8080/health | jq . || echo "API not responding"
