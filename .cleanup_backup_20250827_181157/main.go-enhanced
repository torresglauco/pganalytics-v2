package main

import (
	"log"
	"pganalytics-backend/internal/config"
	"pganalytics-backend/internal/database"
	"pganalytics-backend/internal/handlers"
	"pganalytics-backend/internal/middleware"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "pganalytics-backend/docs" // Import docs
)

// @title PGAnalytics API
// @version 1.0
// @description Modern PostgreSQL analytics backend
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.pganalytics.com/support
// @contact.email support@pganalytics.com

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host localhost:8080
// @BasePath /
// @schemes http https

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization

func main() {
	// Load configuration
	cfg := config.Load()

	// Connect to database
	db, err := database.Connect(cfg)
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}
	defer db.Close()

	// Setup Gin
	if cfg.Environment == "production" {
		gin.SetMode(gin.ReleaseMode)
	}

	router := gin.Default()

	// Middleware
	router.Use(middleware.CorsMiddleware())
	router.Use(middleware.LoggingMiddleware())
	router.Use(middleware.RateLimitMiddleware())

	// Swagger documentation
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Routes
	handlers.SetupRoutes(router, cfg, db)

	// Start server
	log.Printf("ðŸš€ Server starting on port %s", cfg.Port)
	log.Printf("ðŸ“š Swagger docs: http://localhost:%s/swagger/index.html", cfg.Port)
	if err := router.Run(":" + cfg.Port); err != nil {
		log.Fatal("Failed to start server:", err)
	}
}
