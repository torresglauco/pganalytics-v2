package routes

import (
	"pganalytics-backend/internal/api/middleware"
	"pganalytics-backend/internal/services"

	"github.com/gin-gonic/gin"
)

func SetupRoutes(router *gin.Engine, authService *services.AuthService, analyticsService *services.AnalyticsService) {
	// Health check
	router.GET("/health", healthCheck)

	// Auth routes
	auth := router.Group("/auth")
	{
		auth.POST("/login", loginHandler(authService))
	}

	// Protected API routes
	api := router.Group("/api")
	api.Use(middleware.AuthMiddleware(authService))
	{
		api.POST("/metrics", metricsHandler(analyticsService))
		api.GET("/data", dataHandler(analyticsService))
	}
}

func healthCheck(c *gin.Context) {
	c.JSON(200, gin.H{
		"status": "ok",
		"service": "pganalytics-backend",
	})
}

func loginHandler(authService *services.AuthService) gin.HandlerFunc {
	return func(c *gin.Context) {
		var loginReq struct {
			Username string \`json:"username"\`
			Password string \`json:"password"\`
		}

		if err := c.ShouldBindJSON(&loginReq); err != nil {
			c.JSON(400, gin.H{"error": "Invalid request"})
			return
		}

		// Simple authentication (replace with your logic)
		if loginReq.Username == "admin" && loginReq.Password == "admin" {
			token, err := authService.GenerateToken(loginReq.Username)
			if err != nil {
				c.JSON(500, gin.H{"error": "Failed to generate token"})
				return
			}

			c.JSON(200, gin.H{
				"token": token,
				"user": loginReq.Username,
			})
		} else {
			c.JSON(401, gin.H{"error": "Invalid credentials"})
		}
	}
}

func metricsHandler(analyticsService *services.AnalyticsService) gin.HandlerFunc {
	return func(c *gin.Context) {
		var metrics interface{}
		if err := c.ShouldBindJSON(&metrics); err != nil {
			c.JSON(400, gin.H{"error": "Invalid metrics data"})
			return
		}

		// Process metrics (implement your logic)
		c.JSON(200, gin.H{
			"status": "metrics received",
			"data": metrics,
		})
	}
}

func dataHandler(analyticsService *services.AnalyticsService) gin.HandlerFunc {
	return func(c *gin.Context) {
		// Return analytics data (implement your logic)
		c.JSON(200, gin.H{
			"data": "analytics data here",
			"timestamp": "2024-01-01T00:00:00Z",
		})
	}
}
